public class PrototypeSample { 
    static Prototype Create(char sw) {
        if (sw == 'A') {
            return new PrototypeA();
        } else if (sw == 'B') {
            return new PrototypeB();
        }
        return null;
    }
    static public void main(String[] args) { 
        Prototype prototype = Create('A');
        prototype.Operation("Hello");        // 値を変えてみる
        Prototype clone = prototype.Clone();
        clone.Operation();                   // 属性が引き継がれました。

        prototype = Create('B');
        prototype.Operation("1234");
        clone = prototype.Clone();
        clone.Operation();
    }
}


abstract class Prototype {
    abstract public Prototype Clone();
    abstract public void Operation(String str);
    abstract public void Operation();
}

class PrototypeA extends Prototype {
    private String _value = "";
    public PrototypeA();
    public PrototypeA(PrototypeA p) {
        _value = p._value;
    } 
    public void Operation(String str) { 
        _value = str;
        System.out.println("update PrototypeA::_value to " + _value);
    }
    public void Operation() {
        System.out.println("PrototypeA::_value is " + _value);      
    }
    public Prototype Clone() { 
       return new PrototypeA(this); 
    }
}
class PrototypeB extends Prototype {
    private Integer _value = new Integer(-1);
    public PrototypeB();
    public PrototypeB(PrototypeB p) {
        _value = p._value;
    } 
    public void Operation(String str) {
        _value = Integer.decode(str);
        System.out.println("update PrototypeB::_value to " + _value);
    }
    public void Operation() {
        System.out.println("PrototypeB::_value is " + _value);      
    }
    public Prototype Clone() { 
       return new PrototypeB(this); 
    }
}
